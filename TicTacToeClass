class TicTacToe:
    def __init__(self, size):
        """Initialize the game board of the given size."""
        self.size = size
        self.board = [['' for _ in range(size)] for _ in range(size)]
        self.moves = 0
        self.current_winner = None

    def place_token(self, token, row, col):
        """Place a token ('X' or 'O') on the board and return the game status."""
        # Validate the token
        if token not in ['X', 'O']:
            return "INVALID TOKEN"
        
        # Validate the move
        if not (0 <= row < self.size and 0 <= col < self.size):
            return "OUT OF BOUNDS"
        if self.board[row][col] != '':
            return "SPOT TAKEN"
        
        # Place the token
        self.board[row][col] = token
        self.moves += 1

        # Check for a win
        if self.check_winner(token, row, col):
            self.current_winner = token
            return f"{token} WON"

        # Check for a draw
        if self.moves == self.size * self.size:
            return "DRAW"

        # Otherwise, the game is still ongoing
        return "ONGOING"

    def check_winner(self, token, row, col):
        """Check if placing the token at (row, col) results in a win."""
        # Check the row
        if all(self.board[row][c] == token for c in range(self.size)):
            return True
        # Check the column
        if all(self.board[r][col] == token for r in range(self.size)):
            return True
        # Check the diagonal (top-left to bottom-right)
        if row == col and all(self.board[i][i] == token for i in range(self.size)):
            return True
        # Check the anti-diagonal (top-right to bottom-left)
        if row + col == self.size - 1 and all(self.board[i][self.size - 1 - i] == token for i in range(self.size)):
            return True
        
        return False

game = TicTacToe(3)
